[[
  name: size
  return: int64_t
  cpu_half: True
  arguments:
    - THTensor* self
    - arg: int64_t dim
      wrap_dim: self
]]

[[
  name: stride
  return: int64_t
  cpu_half: True
  arguments:
    - THTensor* self
    - arg: int64_t dim
      wrap_dim: self
]]


[[
  name: tensor
  return: THTensor*
  cpu_half: True
  variants: [function]
  options:
    - cname: new
      arguments: []
    - cname: newWithSize
      arguments:
        - THSize* size
        - CONSTANT NULL
    - cname: newWithSize
      arguments:
        - THSize* size
        - arg: THStride* stride
    - cname: newWithStorage
      arguments:
        - THStorage* storage
        - int64_t storageOffset
        - THSize* size
        - arg: THStride* stride
          default: NULL
]]

# In theory, this could be a part of the above declaration. But in
# practice this leads to all sorts of problems with ambiguous overloads.
# So we add it here with a separate name.
[[
  name: alias
  return: THTensor*
  cpu_half: True
  variants: [function]
  options:
    - cname: newWithTensor
      arguments: 
        - THTensor* tensor
]]

[[
  name: select
  cpu_half: True
  variants: [method,function]
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - arg: int64_t dim
      wrap_dim: self
    - int64_t sliceIndex
  aten_custom_call: |
    int64_t ndim = self.dim();
    AT_ASSERT(ndim > 0, "select() cannot be applied to a 0-dim tensor.");
    if(ndim == 1) {
      ${THTensor}_narrow(${state,}result_->tensor, self_->tensor, dim, sliceIndex,1);
      result_->setScalar(true);
    } else {
      ${THTensor}_select(${state,}result_->tensor, self_->tensor, dim, sliceIndex);
    }
]]

[[
  name: _unnarrow
  variants: [method,function]
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - arg: int64_t dimension
      wrap_dim: self
    - int64_t offset
    - int64_t dimSize
  aten_custom_call: |
    int64_t ndim = self.dim();
    AT_ASSERT(ndim > 0, "unnarrow() cannot be applied to a 0-dim tensor.");
    std::vector<int64_t> self_sizes = self.sizes();
    self_sizes[dimension] = dimSize;
    auto self_sizes_ = THLongStorageView::makeFromSize(self_sizes);
    ${THTensor}_zeros(${state,}result_->tensor, self_sizes_);
    auto narrowed_result = result.narrow(dimension, offset, self.size(dimension));
    narrowed_result.copy_(self);
]]

[[
  name: assign_
  cname: copy
  cpu_half: True
  return: self
  arguments:
    - THTensor* self
    - THTensor* src
]]

[[
  name: as_strided
  variants: [method,function]
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - THSize* size
    - THStride* stride
  aten_custom_call: |
    ${THTensor}_setStorage(${state,}result_->tensor, self_->tensor->storage, self_->tensor->storageOffset, size_, stride_);
    result_->maybeScalar(size.size() == 0);
]]

[[
  name: as_strided_
  variants: [method,function]
  return: argument 0
  arguments:
    - THTensor* self
    - THSize* size
    - THStride* stride
  aten_custom_call: |
    ${THTensor}_setStorage(${state,}self_->tensor, self_->tensor->storage, self_->tensor->storageOffset, size_, stride_);
    self_->maybeScalar(size.size() == 0);
]]


[[
  name: cat
  cname: catArray
  variants: [function]
  return: self
  arguments:
    - arg: THTensor* self
      output: True
    - TensorList tensors
    - arg: int64_t dim
      wrap_dim: tensors
      default: 0
]]

[[
  name: reshape_
  cname: resize
  cpu_half: True
  return: self
  arguments:
    - THTensor* self
    - arg: THSize* size
    - arg: THStride* stride
]]
